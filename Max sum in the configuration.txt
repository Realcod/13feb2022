/*
Given an array(0-based indexing), you have to find the max sum of i*A[i] where A[i] is the element at index i in the array.
The only operation allowed is to rotate(clock-wise or counter clock-wise) the array any number of times.
*/
#include<iostream>
using namespace std;

int maxsumconfig(int arr[],int n){
	int sum=0,s0=0;
	for(int i=0;i<n;i++){
		sum+=arr[i];
		s0=s0+i*arr[i];
	}
	int max=s0;
	int s=s0;
	for(int i=0;i<n-1;i++){
		int sip=s+sum-n*arr[n-i-1];
		if(sip>s){
			max=sip;
		}
		s=sip;
	}
	return max;
}

int main(){
	int n,arr[100];
	cout<<"Enter the size of the array"<<endl;
	cin>>n;
	
	cout<<"Enter the values in the array"<<endl;
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	
	int max=maxsumconfig(arr,n);
	cout<<"The maximum sum in the configuration: "<<max;
}